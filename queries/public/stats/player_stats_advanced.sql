SELECT ROUND((stats -> 'dpi')::numeric, 2)                                                 as dpi,
       ROUND((stats -> 'gpi')::numeric, 2)                                                 as gpi,
       ROUND((stats -> 'opi')::numeric, 2)                                                 as opi,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'goals')::numeric, 2)          as goals,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'saves')::numeric, 2)          as saves,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'score')::numeric, 2)          as score,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'shots')::numeric, 2)          as shots,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'assists')::numeric, 2)        as assists,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'goals_against')::numeric, 2) as goals_against,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'core' -> 'shots_against')::numeric, 2) as shots_against,

       ROUND((stats -> 'otherStats' -> 'stats' -> 'demo' -> 'taken')::numeric, 2)            as demos_taken,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'demo' -> 'inflicted')::numeric, 2)        as demos_inflicted,

       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'bpm')::numeric, 2)             as bpm,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'bcpm')::numeric, 2)            as bcpm,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'avg_amount')::numeric, 2)      as avg_amount,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_stolen')::numeric, 2)   as amount_stolen,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_overfill')::numeric, 2) as amount_overfill,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_boost_0_25')::numeric, 2) as time_boost_0_25,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_full_boost')::numeric, 2) as time_full_boost,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_zero_boost')::numeric, 2) as time_zero_boost,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_collected')::numeric, 2) as amount_collected,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'count_stolen_big')::numeric, 2) as count_stolen_big,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_boost_25_50')::numeric, 2) as time_boost_25_50,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_boost_50_75')::numeric, 2) as time_boost_50_75,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_stolen_big')::numeric, 2) as amount_stolen_big,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'time_boost_75_100')::numeric, 2) as time_boost_75_100,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'count_stolen_small')::numeric, 2) as count_stolen_small,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_boost_0_25')::numeric, 2) as percent_boost_0_25,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_full_boost')::numeric, 2) as percent_full_boost,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_zero_boost')::numeric, 2) as percent_zero_boost,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_stolen_small')::numeric, 2) as amount_stolen_small,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'count_collected_big')::numeric, 2) as count_collected_big,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_boost_25_50')::numeric, 2) as percent_boost_25_50,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_boost_50_75')::numeric, 2) as percent_boost_50_75,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_collected_big')::numeric, 2) as amount_collected_big,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'percent_boost_75_100')::numeric, 2) as percent_boost_75_100,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'count_collected_small')::numeric, 2) as count_collected_small,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_collected_small')::numeric, 2) as amount_collected_small,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_overfill_stolen')::numeric, 2) as amount_overfill_stolen,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'boost' -> 'amount_used_while_supersonic')::numeric, 2) as amount_used_while_supersonic,

       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'avg_speed')::numeric, 2)    as avg_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_ground')::numeric, 2)  as time_ground,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_low_air')::numeric, 2) as time_low_air,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_high_air')::numeric, 2) as time_high_air,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_ground')::numeric, 2) as percent_ground,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'total_distance')::numeric, 2) as total_distance,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_low_air')::numeric, 2) as percent_low_air,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_powerslide')::numeric, 2) as time_powerslide,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_slow_speed')::numeric, 2) as time_slow_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'count_powerslide')::numeric, 2) as count_powerslide,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_high_air')::numeric, 2) as percent_high_air,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_boost_speed')::numeric, 2) as time_boost_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_slow_speed')::numeric, 2) as percent_slow_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_boost_speed')::numeric, 2) as percent_boost_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'avg_speed_percentage')::numeric, 2) as avg_speed_percentage,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'time_supersonic_speed')::numeric, 2) as time_supersonic_speed,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'avg_powerslide_duration')::numeric, 2) as avg_powerslide_duration,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'movement' -> 'percent_supersonic_speed')::numeric, 2) as percent_supersonic_speed,

       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_most_back')::numeric, 2) as time_most_back,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_behind_ball')::numeric, 2) as time_behind_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_most_back')::numeric, 2) as percent_most_back,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_infront_ball')::numeric, 2) as time_infront_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_most_forward')::numeric, 2) as time_most_forward,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_neutral_third')::numeric, 2) as time_neutral_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_behind_ball')::numeric, 2) as percent_behind_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_defensive_half')::numeric, 2) as time_defensive_half,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_offensive_half')::numeric, 2) as time_offensive_half,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'avg_distance_to_ball')::numeric, 2) as avg_distance_to_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_infront_ball')::numeric, 2) as percent_infront_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_most_forward')::numeric, 2) as percent_most_forward,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_closest_to_ball')::numeric, 2) as time_closest_to_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_defensive_third')::numeric, 2) as time_defensive_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_offensive_third')::numeric, 2) as time_offensive_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'avg_distance_to_mates')::numeric, 2) as avg_distance_to_mates,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_neutral_third')::numeric, 2) as percent_neutral_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_defensive_half')::numeric, 2) as percent_defensive_half,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_offensive_half')::numeric, 2) as percent_offensive_half,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_closest_to_ball')::numeric, 2) as percent_closest_to_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_defensive_third')::numeric, 2) as percent_defensive_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_offensive_third')::numeric, 2) as percent_offensive_third,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'time_farthest_from_ball')::numeric, 2) as time_farthest_from_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'percent_farthest_from_ball')::numeric, 2) as percent_farthest_from_ball,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'avg_distance_to_ball_possession')::numeric, 2) as avg_distance_to_ball_possession,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'goals_against_while_last_defender')::numeric, 2) as goals_against_while_last_defender,
       ROUND((stats -> 'otherStats' -> 'stats' -> 'positioning' -> 'avg_distance_to_ball_no_possession')::numeric, 2) as avg_distance_to_ball_no_possession,


       p."memberId"                                                                        as member_id,
       "roundId"                                                                           as round_id

FROM sprocket.player_stat_line
         INNER JOIN player p on player_stat_line."playerId" = p.id




